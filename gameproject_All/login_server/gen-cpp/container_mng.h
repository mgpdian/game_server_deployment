/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef container_mng_H
#define container_mng_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "room_opt_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class container_mngIf {
 public:
  virtual ~container_mngIf() {}
  virtual int32_t create_room(const int32_t no) = 0;
};

class container_mngIfFactory {
 public:
  typedef container_mngIf Handler;

  virtual ~container_mngIfFactory() {}

  virtual container_mngIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(container_mngIf* /* handler */) = 0;
};

class container_mngIfSingletonFactory : virtual public container_mngIfFactory {
 public:
  container_mngIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<container_mngIf>& iface) : iface_(iface) {}
  virtual ~container_mngIfSingletonFactory() {}

  virtual container_mngIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(container_mngIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<container_mngIf> iface_;
};

class container_mngNull : virtual public container_mngIf {
 public:
  virtual ~container_mngNull() {}
  int32_t create_room(const int32_t /* no */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _container_mng_create_room_args__isset {
  _container_mng_create_room_args__isset() : no(false) {}
  bool no :1;
} _container_mng_create_room_args__isset;

class container_mng_create_room_args {
 public:

  container_mng_create_room_args(const container_mng_create_room_args&);
  container_mng_create_room_args& operator=(const container_mng_create_room_args&);
  container_mng_create_room_args() : no(0) {
  }

  virtual ~container_mng_create_room_args() throw();
  int32_t no;

  _container_mng_create_room_args__isset __isset;

  void __set_no(const int32_t val);

  bool operator == (const container_mng_create_room_args & rhs) const
  {
    if (!(no == rhs.no))
      return false;
    return true;
  }
  bool operator != (const container_mng_create_room_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const container_mng_create_room_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class container_mng_create_room_pargs {
 public:


  virtual ~container_mng_create_room_pargs() throw();
  const int32_t* no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _container_mng_create_room_result__isset {
  _container_mng_create_room_result__isset() : success(false) {}
  bool success :1;
} _container_mng_create_room_result__isset;

class container_mng_create_room_result {
 public:

  container_mng_create_room_result(const container_mng_create_room_result&);
  container_mng_create_room_result& operator=(const container_mng_create_room_result&);
  container_mng_create_room_result() : success(0) {
  }

  virtual ~container_mng_create_room_result() throw();
  int32_t success;

  _container_mng_create_room_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const container_mng_create_room_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const container_mng_create_room_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const container_mng_create_room_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _container_mng_create_room_presult__isset {
  _container_mng_create_room_presult__isset() : success(false) {}
  bool success :1;
} _container_mng_create_room_presult__isset;

class container_mng_create_room_presult {
 public:


  virtual ~container_mng_create_room_presult() throw();
  int32_t* success;

  _container_mng_create_room_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class container_mngClient : virtual public container_mngIf {
 public:
  container_mngClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  container_mngClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t create_room(const int32_t no);
  void send_create_room(const int32_t no);
  int32_t recv_create_room();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class container_mngProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<container_mngIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (container_mngProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_room(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  container_mngProcessor(::apache::thrift::stdcxx::shared_ptr<container_mngIf> iface) :
    iface_(iface) {
    processMap_["create_room"] = &container_mngProcessor::process_create_room;
  }

  virtual ~container_mngProcessor() {}
};

class container_mngProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  container_mngProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< container_mngIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< container_mngIfFactory > handlerFactory_;
};

class container_mngMultiface : virtual public container_mngIf {
 public:
  container_mngMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<container_mngIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~container_mngMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<container_mngIf> > ifaces_;
  container_mngMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<container_mngIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t create_room(const int32_t no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_room(no);
    }
    return ifaces_[i]->create_room(no);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class container_mngConcurrentClient : virtual public container_mngIf {
 public:
  container_mngConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  container_mngConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t create_room(const int32_t no);
  int32_t send_create_room(const int32_t no);
  int32_t recv_create_room(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
